<?php
// Function to recursively search for all wp-config.php files
function searchWpConfigs($dir) {
    $rii = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($dir));
    $files = [];

    foreach ($rii as $file) {
        if ($file->isDir()) { 
            continue;
        }

        if ($file->getFilename() == 'wp-config.php') {
            $files[] = $file->getPathname();
        }
    }

    return $files;
}

// Function to parse wp-config.php and get the database credentials
function parseWpConfig($path) {
    $content = file_get_contents($path);
    $vars = [];

    preg_match("/define\(\s*['\"]DB_NAME['\"],\s*['\"](.+?)['\"]\s*\);/", $content, $matches);
    if (isset($matches[1])) $vars['DB_NAME'] = $matches[1];

    preg_match("/define\(\s*['\"]DB_USER['\"],\s*['\"](.+?)['\"]\s*\);/", $content, $matches);
    if (isset($matches[1])) $vars['DB_USER'] = $matches[1];

    preg_match("/define\(\s*['\"]DB_PASSWORD['\"],\s*['\"](.+?)['\"]\s*\);/", $content, $matches);
    if (isset($matches[1])) $vars['DB_PASSWORD'] = $matches[1];

    preg_match("/define\(\s*['\"]DB_HOST['\"],\s*['\"](.+?)['\"]\s*\);/", $content, $matches);
    if (isset($matches[1])) $vars['DB_HOST'] = $matches[1];

    preg_match("/\\\$table_prefix\s*=\s*['\"](.+?)['\"]\s*;/", $content, $matches);
    if (isset($matches[1])) $vars['table_prefix'] = $matches[1];

    return $vars;
}

// Function to retrieve site URL from the database
function getSiteUrl($wp_config_path) {
    try {
        $vars = parseWpConfig($wp_config_path);

        if (empty($vars['DB_NAME']) || empty($vars['DB_USER']) || empty($vars['DB_PASSWORD']) || empty($vars['DB_HOST']) || empty($vars['table_prefix'])) {
            return "Error: Could not retrieve database credentials from $wp_config_path.";
        }

        $db_name = $vars['DB_NAME'];
        $db_user = $vars['DB_USER'];
        $db_password = $vars['DB_PASSWORD'];
        $db_host = $vars['DB_HOST'];
        $table_prefix = $vars['table_prefix'];

        // Connect to the database
        $mysqli = @new mysqli($db_host, $db_user, $db_password, $db_name); // '@' suppresses error output, we handle it in the catch block

        if ($mysqli->connect_error) {
            throw new Exception("Connection failed: " . $mysqli->connect_error);
        }

        // Retrieve site URL
        $site_url_sql = "SELECT option_value AS site_url FROM {$table_prefix}options WHERE option_name = 'siteurl' LIMIT 1";
        $site_url_result = $mysqli->query($site_url_sql);

        if ($site_url_result->num_rows > 0) {
            $site_url_row = $site_url_result->fetch_assoc();
            $site_url = $site_url_row['site_url'];
            $result = "Site URL: $site_url";
        } else {
            throw new Exception("Error retrieving site URL.");
        }

        // Close the database connection
        $mysqli->close();
        return $result;
    } catch (Exception $e) {
        return "Error: " . $e->getMessage();
    }
}

// Check if form is submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST['delete_script'])) {
        // Get script filename
        $script_filename = __FILE__;

        // Attempt to delete the script file
        if (unlink($script_filename)) {
            echo '<p style="color: green;">Script file deleted successfully.</p>';
        } else {
            echo '<p style="color: red;">Error deleting script file.</p>';
        }
    } else {
        $dirPath = $_POST["dir_path"];
        if (!empty($dirPath) && is_dir($dirPath)) {
            $results = searchWpConfigs($dirPath);
            if (!empty($results)) {
                echo "Found wp-config.php files at:<br>";
                ob_flush(); flush(); // Send the output to the browser immediately

                foreach ($results as $result) {
                    echo htmlspecialchars($result) . "<br>";
                    ob_flush(); flush(); // Send the output to the browser immediately
                    
                    // Get site URL and handle errors
                    echo getSiteUrl($result) . "<br>";
                    ob_flush(); flush(); // Send the output to the browser immediately
                }
            } else {
                echo "wp-config.php not found in the given directory.";
            }
        } else {
            echo "Please enter a valid directory path.";
        }
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Search and Retrieve WordPress Site URL</title>
</head>
<body>
    <h1>Search for wp-config.php and Retrieve Site URL</h1>
    <!-- Display current directory path -->
    <?php
    $current_directory = getcwd(); // Get current working directory path
    echo '<p><strong>Current Directory:</strong> <br>' . htmlspecialchars($current_directory) . '</p>';
    ?>
    <form method="post">
        <label for="dir_path">Directory Path:</label>
        <input type="text" id="dir_path" name="dir_path" required>
        <input type="submit" value="Search and Retrieve Site URL">
    </form>

    <!-- Add a delete button to remove this script -->
    <form method="post" style="margin-top: 20px;">
        <input type="hidden" name="delete_script" value="1">
        <input type="submit" value="Delete This Script">
    </form>
    
</body>
</html>
